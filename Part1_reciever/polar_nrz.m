% POLAR_NRZ Generates a polar non-return-to-zero (NRZ) signal from a
% sequence of bits.
%
% signal = polar_nrz(bits, high_voltage_level, low_voltage_level, samples_per_bit)
%
% Arguments:
% - bits: A row vector of binary values (0 or 1) representing the input bit
% stream.
% - high_voltage_level: The voltage level used to represent a logic high (1)
% value.
% - low_voltage_level: The voltage level used to represent a logic low (0)
% value.
% - samples_per_bit: The number of samples per bit used to generate the
% output signal. Default value is 100.
%
% Returns:
% - signal: A row vector representing the output signal.
%
% Description:
% The function generates a polar NRZ signal by mapping each input bit to
% a voltage level. A logic high (1) value is mapped to the high voltage
% level, and a logic low (0) value is mapped to the low voltage level.
% The output signal is generated by repeating each mapped voltage level for
% a specified number of samples per bit.
%
% Example usage:
% >> bits = [1 0 1 1 0];
% >> high_voltage_level = 3;
% >> low_voltage_level = -3;
% >> samples_per_bit = 50;
% >> signal = polar_nrz(bits, high_voltage_level, low_voltage_level, samples_per_bit);
%
% In this example, the function generates a polar NRZ signal for the input bit sequence [1 0 1 1 0] with high
% voltage level of 3, low voltage level of -3, and 50 samples per bit. The generated signal is stored in the
% variable signal.
function signal = polar_nrz(bits, high_voltage_level, samples_per_bit)
    % Check the input arguments
    if nargin < 3
        samples_per_bit = 100;
    end

    % Initialize the output signal
    signal = zeros(1, length(bits)*samples_per_bit);

    % Set the voltage level
    v_low = -high_voltage_level;
    v_high = high_voltage_level;

    % Generate the signal
    for i = 1:length(bits)
        if bits(i) == 1
            signal((i-1)*samples_per_bit+1:i*samples_per_bit) = v_high;
        else
            signal((i-1)*samples_per_bit+1:i*samples_per_bit) = v_low;
        end
    end

    % Create a new figure
    figure();

    % Create the time axis
    t = linspace(0, length(signal)/samples_per_bit, length(signal));

    % Plot the signal
    plot(t, signal);
    axis([0 t(end) 1.2*v_low 1.2*v_high]);

    % Add grid and labels
    grid on;
    xlabel('Time (s)');
    ylabel('Voltage (V)');
    title('Polar NRZ Signal');
end
